name: Build and Deploy to VPS

on:
  workflow_dispatch:

jobs:
  test:
    name: Run Go Tests
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        ports:
          - 3306:3306
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: test_schema
          MYSQL_ROOT_HOST: "%"
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Wait for MySQL
        run: |
          for i in {1..30}; do
            if mysqladmin ping -h127.0.0.1 --silent; then
              echo "MySQL is ready!"
              break
            fi
            echo "Waiting for MySQL..."
            sleep 2
          done

      - name: Show MySQL Users
        run: |
          mysql -h127.0.0.1 -uroot -proot -e "SELECT User, Host FROM mysql.user;"

      - name: Create Test User
        run: |
          mysql -h127.0.0.1 -uroot -proot -e "CREATE USER IF NOT EXISTS 'samp'@'%' IDENTIFIED BY 'password';"
          mysql -h127.0.0.1 -uroot -proot -e "GRANT ALL PRIVILEGES ON test_schema.* TO 'samp'@'%';"
          mysql -h127.0.0.1 -uroot -proot -e "FLUSH PRIVILEGES;"

      - name: Test MySQL Connection
        run: |
          mysql -h127.0.0.1 -usamp -ppassword -e "SHOW DATABASES;"

      - name: Run tests
        env:
          DATABASE_URL: "samp:password@tcp(127.0.0.1:3306)/test_schema"
        run: |
          cd backend
          go test -v ./...

  build:
    name: Build Application Code
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Build and Test Backend
        run: |
          cd backend
          go build -o ucp

      - name: Build Frontend
        run: |
          cd ucp
          npm install
          npm run build

      - name: Show Current Directory
        run: pwd

      - name: Verify Files
        run: |
          ls -l ./deploy.sh
          ls -l ./backend/config.json
          ls -l ./backend/ucp

      - name: Ensure Correct Working Directory
        run: cd $GITHUB_WORKSPACE

      - name: Upload Single File Artifact (deploy.sh)
        uses: actions/upload-artifact@v3
        with:
          name: single-deploy-sh
          path: deploy.sh

      - name: Upload Single File Artifact (config.json)
        uses: actions/upload-artifact@v3
        with:
          name: single-config-json
          path: backend/config.json

      - name: Upload Single File Artifact (ucp)
        uses: actions/upload-artifact@v3
        with:
          name: single-ucp
          path: backend/ucp

      - name: Upload Frontend Artifact
        uses: actions/upload-artifact@v3
        with:
          name: frontend
          path: ucp/build
          if-no-files-found: error

  deploy:
    name: Deploy to VPS
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Set up SSH
        run: |
          mkdir -p /tmp/ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > /tmp/ssh/id_rsa
          chmod 600 /tmp/ssh/id_rsa
          ssh-keyscan -p ${{ secrets.VPS_PORT }} -H ${{ secrets.VPS_HOST }} >> /tmp/ssh/known_hosts
          echo "SSH setup completed."

      - name: Download deploy.sh
        uses: actions/download-artifact@v3
        with:
          name: single-deploy-sh
          path: .

      - name: Download config.json
        uses: actions/download-artifact@v3
        with:
          name: single-config-json
          path: ./backend

      - name: Download ucp binary
        uses: actions/download-artifact@v3
        with:
          name: single-ucp
          path: ./backend

      - name: Download Frontend Artifact
        uses: actions/download-artifact@v3
        with:
          name: frontend
          path: ucp/build

      - name: Verify Files Before Deploying
        run: ls -R

      - name: Create remote directory
        run: |
          ssh -o UserKnownHostsFile=/tmp/ssh/known_hosts -i /tmp/ssh/id_rsa -p ${{ secrets.VPS_PORT }} ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "sudo mkdir -p /home/ubuntu/app && sudo chown -R ubuntu:ubuntu /home/ubuntu/app"

      - name: Transfer Backend to VPS
        run: |
          rsync -avz \
            -e "ssh -o UserKnownHostsFile=/tmp/ssh/known_hosts -i /tmp/ssh/id_rsa -p ${{ secrets.VPS_PORT }}" \
            deploy.sh backend/config.json backend/ucp ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:/home/ubuntu/app/

      - name: Transfer Frontend to VPS
        run: |
          rsync -avz \
            -e "ssh -o UserKnownHostsFile=/tmp/ssh/known_hosts -i /tmp/ssh/id_rsa -p ${{ secrets.VPS_PORT }}" \
            ucp/build ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:/home/ubuntu/app/

      - name: Run Deployment Script on VPS
        run: |
          ssh -o UserKnownHostsFile=/tmp/ssh/known_hosts -t -i /tmp/ssh/id_rsa ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} -p ${{ secrets.VPS_PORT }} \
          "chmod +x /home/ubuntu/app/deploy.sh && /home/ubuntu/app/deploy.sh"

      - name: Cleanup SSH Keys
        run: rm -rf /tmp/ssh